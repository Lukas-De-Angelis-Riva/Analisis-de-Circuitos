from itertools import product
import numpy as np

# Valores reales

K1_real = sqrt(0.8911)
K2_real = sqrt(0.8911)
b1_real = 2272.32
c1_real = 3.17959e6
b2_real = 266.68
c2_real = 900440

# Serie E24
valoresC = np.array([1.0, 1.1, 1.2, 1.3, 1.5, 1.6, 1.8, 2.0, 2.2, 2.4, 2.7, 3.0,
    3.3, 3.6, 3.9, 4.3, 4.7, 5.1, 5.6, 6.2, 6.8, 7.5, 8.2, 9.1, 10, 11, 12, 13,
    15, 16, 18, 20, 22, 24, 27, 30, 33, 36, 39, 43, 47, 51, 56, 62, 68, 75, 82,
    91, 100, 110, 120, 130, 150, 160, 180, 200, 220, 240, 270, 300, 330, 360,
    390, 430, 470, 510, 560, 620, 680, 750, 820, 910, 1000])*1e-9

# Serie E96
valoresR = np.array([1.00, 1.02, 1.05, 1.07, 1.10, 1.13, 1.15, 1.18, 1.21, 1.24, 1.27, 1.30, 1.33, 1.37, 1.40, 1.43, 1.47, 1.50, 1.54, 1.58, 1.62, 1.65, 1.69,
    1.74, 1.78, 1.82, 1.87, 1.91, 1.96, 2.00, 2.05, 2.10, 2.15, 2.21, 2.26, 2.32,
    2.37, 2.43, 2.49, 2.55, 2.61, 2.67, 2.74, 2.80, 2.87, 2.94, 3.01, 3.09, 3.16,
    3.24, 3.32, 3.40, 3.48, 3.57, 3.65, 3.74, 3.83, 3.92, 4.02, 4.12, 4.22, 4.32,
    4.42, 4.53, 4.64, 4.75, 4.87, 4.99, 5.11, 5.23, 5.36, 5.49, 5.62, 5.76, 5.90,
    6.04, 6.19, 6.34, 6.49, 6.65, 6.81, 6.98, 7.15, 7.32, 7.50, 7.68, 7.87, 8.06,
    8.25, 8.45, 8.66, 8.87, 9.09, 9.31, 9.53, 9.76, 100, 102, 105, 107, 110, 113,
    115, 118, 121, 124, 127, 130, 133, 137, 140, 143, 147, 150, 154, 158, 162, 165,
    169, 174, 178, 182, 187, 191, 196, 200, 205, 210, 215, 221, 226, 232, 237, 243,
    249, 255, 261, 267, 274, 280, 287, 294, 301, 309, 316, 324, 332, 340, 348, 357,
    365, 374, 383, 392, 402, 412, 422, 432, 442, 453, 464, 475, 487, 499, 511, 523,
    536, 549, 562, 576, 590, 604, 619, 634, 649, 665, 681, 698, 715, 732, 750, 768,
    787, 806, 825, 845, 866, 887, 909, 931, 953, 976, 1000])*1000
                     
                     
def err(real, sim):
  return abs((real-sim)/real)
  
# Busqueda de la ganancia.
mejores_comb = []
for C_11, C_31, C_12, C_32 in product(valoresC, valoresC, valoresC, valoresC):
  K = (C_11*C_12)/(C_31*C_32)
  errK = err(K, K_real)
  if(errK < 0.001):
    mejores_comb.append([C_11, C_31, C_12, C_32])
    
print("Se encontraron", len(mejores_comb), "posibles combinaciones.")
# >>> Se encontraron 2802 posibles combinaciones.

# Busqueda de C21, R11, R12, C22, R12, R22
for C_11, C_31, C_12, C_32 in mejores_comb:
  mejor_comb1 = [] # C_21, R_11, R_21 
  menor_err1 = float('inf')
  mejor_comb2 = [] # C_22, R_12, R_22
  menor_err2 = float('inf')

  for C_2, R_1, R_2 in product(valoresC, valoresR, valoresR):
    b1 = (C_11+C_2+C_31)/(R_2*C_2*C_31)
    c1 = 1/(R_1*R_2*C_2*C_31)
    err1 = err(b1, b1_real) + err(c1, c1_real)
    if err1 < menor_err1:
      mejor_comb1 = [C_2, R_1, R_2]
      menor_err1 = err1

    b2 = (C_12+C_2+C_32)/(R_2*C_2*C_32)
    c2 = 1/(R_1*R_2*C_2*C_32)
    err2 = err(b2, b2_real) + err(c2, c2_real)
    if err2 < menor_err2:
      mejor_comb2 = [C_2, R_1, R_2]
      menor_err2 = err2

  if (menor_err2 < 0.05) and (menor_err1 < 0.05):
    [C11, C_21, C_31, R_11, R_21] = [C_11, mejor_comb1[0], C_31, mejor_comb1[1], mejor_comb1[2]]
    [C12, C_22, C_32, R_12, R_22] = [C_12, mejor_comb2[0], C_32, mejor_comb2[1], mejor_comb2[2]]
    print("Termino la busqueda.")
    break

print("C_11: ", C_11 ,"\tC_21: ", C_21, "\tC_31", C_31, "\tR_11: ", R_11, "\tR_21: ", R_21)
# >>> C_11:  1e-09 	C_21:  1.3e-07 	C_31:  2.2e-09 	R_11:  5360.0 	R_21:  205000.0
print("C_12: ", C_12 ,"\tC_22: ", C_22, "\tC_32", C_32, "\tR_12: ", R_12, "\tR_22: ", R_22)
# >>> C_12:  1e-08 	C_22:  1.6e-07 	C_32:  5.1e-09 	R_12:  1690.0 	R_22:  806000.0